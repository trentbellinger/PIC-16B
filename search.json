[
  {
    "objectID": "about.html",
    "href": "about.html",
    "title": "About",
    "section": "",
    "text": "About this blog"
  },
  {
    "objectID": "posts/Homework1/HW1.html",
    "href": "posts/Homework1/HW1.html",
    "title": "Analysis of Historic Temperature Data for Different Countries",
    "section": "",
    "text": "Before beginning the coding for the assignment, I loaded in all the necessary packages. The packages are loaded in below, and have a short description of what they were used for in the assignment.\n\n\n# used to read in data as dataframes and in each function\nimport pandas as pd\n\n# used in part 1 to create the database and in the query functions\nimport sqlite3\n\n# used in the temperature_coefficient_plot function\nimport numpy as np\n\n# used for visualizations\nfrom plotly import express as px\n\n# used to obtain coefficients in the temperature_coefficient_plot function\nfrom sklearn.linear_model import LinearRegression\n\n# used to properly show figures in the quarto blog\nimport plotly.io as pio\npio.renderers.default=\"iframe\""
  },
  {
    "objectID": "posts/Homework1/HW1.html#stations-dataset",
    "href": "posts/Homework1/HW1.html#stations-dataset",
    "title": "Analysis of Historic Temperature Data for Different Countries",
    "section": "Stations Dataset:",
    "text": "Stations Dataset:\n\nThis is a dataset that contains the ID, latitude, longitude, elevation, and name of each station that we will be looking at.\nWe are particularly interested in the longitude and latitude columns of this datast, which can be used to create visualizations where the locations of the stations are accurately represented on a world map.\nThe data is read in below along with a preview of what it looks like.\n\n\nstations = pd.read_csv(\"station-metadata.csv\")\nstations.head()\n\n\n\n\n\n\n\n\nID\nLATITUDE\nLONGITUDE\nSTNELEV\nNAME\n\n\n\n\n0\nACW00011604\n57.7667\n11.8667\n18.0\nSAVE\n\n\n1\nAE000041196\n25.3330\n55.5170\n34.0\nSHARJAH_INTER_AIRP\n\n\n2\nAEM00041184\n25.6170\n55.9330\n31.0\nRAS_AL_KHAIMAH_INTE\n\n\n3\nAEM00041194\n25.2550\n55.3640\n10.4\nDUBAI_INTL\n\n\n4\nAEM00041216\n24.4300\n54.4700\n3.0\nABU_DHABI_BATEEN_AIR"
  },
  {
    "objectID": "posts/Homework1/HW1.html#temperatures-dataset",
    "href": "posts/Homework1/HW1.html#temperatures-dataset",
    "title": "Analysis of Historic Temperature Data for Different Countries",
    "section": "Temperatures Dataset:",
    "text": "Temperatures Dataset:\n\nThis is a dataset containing the ID, year, and temperature at the 12 months during the year for each station.\nWe are especially interested in looking at the temperature fluctuations at each station, so this dataset will be very useful for that.\nThe dataset is read in below along with a preview of what it looks like.\n\n\ntemps = pd.read_csv(\"temps.csv\")\ntemps.head()\n\n\n\n\n\n\n\n\nID\nYear\nVALUE1\nVALUE2\nVALUE3\nVALUE4\nVALUE5\nVALUE6\nVALUE7\nVALUE8\nVALUE9\nVALUE10\nVALUE11\nVALUE12\n\n\n\n\n0\nACW00011604\n1961\n-89.0\n236.0\n472.0\n773.0\n1128.0\n1599.0\n1570.0\n1481.0\n1413.0\n1174.0\n510.0\n-39.0\n\n\n1\nACW00011604\n1962\n113.0\n85.0\n-154.0\n635.0\n908.0\n1381.0\n1510.0\n1393.0\n1163.0\n994.0\n323.0\n-126.0\n\n\n2\nACW00011604\n1963\n-713.0\n-553.0\n-99.0\n541.0\n1224.0\n1627.0\n1620.0\n1596.0\n1332.0\n940.0\n566.0\n-108.0\n\n\n3\nACW00011604\n1964\n62.0\n-85.0\n55.0\n738.0\n1219.0\n1442.0\n1506.0\n1557.0\n1221.0\n788.0\n546.0\n112.0\n\n\n4\nACW00011604\n1965\n44.0\n-105.0\n38.0\n590.0\n987.0\n1500.0\n1487.0\n1477.0\n1377.0\n974.0\n31.0\n-178.0\n\n\n\n\n\n\n\n\nLooking at the temperatures dataset above, it is clear that it will not be very easy to work with if we want to look at temperatures by month and year because years and months are all in different columns.\nWe will solve this issue by creating function to prepare the temps dataset into a more suitable form for our database.\nThis function, created in lecture, is defined below and is called on the temps dataset. A preview of the new dataset that we will use for database creation is also shown.\n\n\ndef prepare_df(df):\n    '''\n    Returns a temperature dataframe in a more suitable format for analysis.\n    \n    Arguments:\n        df (Pandas dataframe): the temps dataframe shown above\n    \n    Returns:\n        df (Pandas dataframe): a temps dataframe with columns ID, Year, Month, and Temp\n    '''\n    df = df.set_index(keys=[\"ID\", \"Year\"])\n    df = df.stack()\n    df = df.reset_index()\n    df = df.rename(columns = {\"level_2\"  : \"Month\" , 0 : \"Temp\"})\n    df[\"Month\"] = df[\"Month\"].str[5:].astype(int)\n    df[\"Temp\"]  = df[\"Temp\"] / 100\n    return(df)\n\ntemps = prepare_df(temps)\ntemps.head()\n\n\n\n\n\n\n\n\nID\nYear\nMonth\nTemp\n\n\n\n\n0\nACW00011604\n1961\n1\n-0.89\n\n\n1\nACW00011604\n1961\n2\n2.36\n\n\n2\nACW00011604\n1961\n3\n4.72\n\n\n3\nACW00011604\n1961\n4\n7.73\n\n\n4\nACW00011604\n1961\n5\n11.28"
  },
  {
    "objectID": "posts/Homework1/HW1.html#countries-dataset",
    "href": "posts/Homework1/HW1.html#countries-dataset",
    "title": "Analysis of Historic Temperature Data for Different Countries",
    "section": "Countries Dataset:",
    "text": "Countries Dataset:\n\nThis is a dataset containing the names of every country along with their 2-letter abbreviations.\nThis will be used to determine which stations are in which country using the ID columns in the stations and temperatures datasets.\nThe data is read in below along with a preview of what the data looks like.\n\n\ncountries = pd.read_csv(\"https://raw.githubusercontent.com/mysociety/gaze/master/data/fips-10-4-to-iso-country-codes.csv\")\ncountries.head()\n\n\n\n\n\n\n\n\nFIPS 10-4\nISO 3166\nName\n\n\n\n\n0\nAF\nAF\nAfghanistan\n\n\n1\nAX\n-\nAkrotiri\n\n\n2\nAL\nAL\nAlbania\n\n\n3\nAG\nDZ\nAlgeria\n\n\n4\nAQ\nAS\nAmerican Samoa"
  },
  {
    "objectID": "posts/Homework1/HW1.html#we-now-create-the-database-with-one-table-for-each-of-the-three-datasets-that-we-have.",
    "href": "posts/Homework1/HW1.html#we-now-create-the-database-with-one-table-for-each-of-the-three-datasets-that-we-have.",
    "title": "Analysis of Historic Temperature Data for Different Countries",
    "section": "We now create the database with one table for each of the three datasets that we have.",
    "text": "We now create the database with one table for each of the three datasets that we have.\n\nWe start by establishing a connection to a file “hw1.db” which is the main file for the database.\nWe then add each dataset that we read in above into the database using the to_sql method.\nThe connection to the database is then closed.\n\n\nconn = sqlite3.connect(\"hw1.db\")\n\ncountries.to_sql(\"countries\", conn, if_exists = \"replace\", index = False)\n\nstations.to_sql(\"stations\", conn, if_exists = \"replace\", index = False)\n\ntemps.to_sql(\"temperatures\", conn, if_exists = \"replace\", index = False)\n    \nconn.close()"
  },
  {
    "objectID": "posts/Homework1/HW1.html#testing-temperature_coefficient_plot-function-part-1",
    "href": "posts/Homework1/HW1.html#testing-temperature_coefficient_plot-function-part-1",
    "title": "Analysis of Historic Temperature Data for Different Countries",
    "section": "Testing temperature_coefficient_plot() Function (Part 1):",
    "text": "Testing temperature_coefficient_plot() Function (Part 1):\n\nWe will now test the function, displaying the visualization that the function gives using db_file = “hw1.db” (the database created above), country = “India”, year_begin = 1980, year_end = 2020, month = 1, min_obs = 10, zoom = 2, mapbox_style = “carto-positron”, color_continuous_scale = px.colors.diverging.RdGy_r.\nThis will give us a visualization of the changes in station temperature recordings from 1980 to 2020 in India with specifications of the plot being zoom, mapbox style, and color continuous scale.\n\n\ncolor_map = px.colors.diverging.RdGy_r # choose a colormap\n\nfig = temperature_coefficient_plot(\"hw1.db\", \"India\", 1980, 2020, 1, \n                                   min_obs = 10,\n                                   zoom = 2,\n                                   mapbox_style=\"carto-positron\",\n                                   color_continuous_scale=color_map)\n\nfig.show()\n\n\n\n\n\nFrom the plot above, we can see that there are 8 to 12 points that are noticably dark, indicating a high change in temperature coefficient in years 1980-2020 in India. This is alarming because it could be indicative of climate issues in those areas."
  },
  {
    "objectID": "posts/Homework1/HW1.html#testing-temperature_coefficient_plot-function-part-2",
    "href": "posts/Homework1/HW1.html#testing-temperature_coefficient_plot-function-part-2",
    "title": "Analysis of Historic Temperature Data for Different Countries",
    "section": "Testing temperature_coefficient_plot() Function (Part 2):",
    "text": "Testing temperature_coefficient_plot() Function (Part 2):\n\nWe will now test the function again, displaying the visualization that the function gives using db_file = “hw1.db” (the database created above), country = “United States”, year_begin = 2010, year_end = 2020, month = 1, min_obs = 20, zoom = 2, mapbox_style = “carto-positron”, color_continuous_scale = px.colors.diverging.RdGy_r.\nThis will give us a visualization of the changes in station temperature recordings from 2010 to 2020 in the United States with specifications of the plot being zoom, mapbox style, and color continuous scale.\n\n\nfig2 = temperature_coefficient_plot(\"hw1.db\", \"United States\", 2010, 2020, 1, \n                                   min_obs = 10,\n                                   zoom = 2,\n                                   mapbox_style=\"carto-positron\",\n                                   color_continuous_scale=color_map)\n\nfig2.show()\n\n\n\n\n\nFrom the plot above, we can see that there are at least 4 points that are extremely dark, indicating a high change in temperature coefficient in years 2010-2020 in the United States. Overall, this is not too bad becasue thare are many more dots that are not dark color, but it should raise alarm for those areas."
  },
  {
    "objectID": "posts/Homework1/HW1.html#question-1-how-does-a-countrys-latitude-affect-its-average-monthly-temperature-in-a-specific-month-and-year",
    "href": "posts/Homework1/HW1.html#question-1-how-does-a-countrys-latitude-affect-its-average-monthly-temperature-in-a-specific-month-and-year",
    "title": "Analysis of Historic Temperature Data for Different Countries",
    "section": "Question 1: How does a country’s latitude affect its average monthly temperature in a specific month and year?",
    "text": "Question 1: How does a country’s latitude affect its average monthly temperature in a specific month and year?"
  },
  {
    "objectID": "posts/Homework1/HW1.html#query_climate_database2-function",
    "href": "posts/Homework1/HW1.html#query_climate_database2-function",
    "title": "Analysis of Historic Temperature Data for Different Countries",
    "section": "query_climate_database2() Function:",
    "text": "query_climate_database2() Function:\n\nWe create a function called query_climate_database2() with the following specifications:\nArguments:\n\n\ndb_file: a file of a sql database\nyear: the year that you want to observe data from\nmonth: an integer for the month of the year which the data should be returned\nmin_latitude: the minimum latitude of stations for which should be returned\nmax_latitude: the maximum latitude of stations for which should be returned\n\n\nReturns: a dataframe corresponding to the above specifications, with columns:\n\n\nNAME: the station name\nLATITUDE: the latitude of the station\nCountry: the name of the country where the station is located\nYear: the year when the temperature reading was taken\nMonth: the month when the temperature reading was taken\nTemp: the average temperature at the specified station during the specified year and month\n\n\nThe code for the query_climate_database2() function is contained in a separate file called “climate_database.py”.\nWe load in the function and display the code below.\n\n\nfrom climate_database import query_climate_database2\nprint(inspect.getsource(query_climate_database2))\n\ndef query_climate_database2(db_file, year, month, min_latitude, max_latitude):\n    '''\n    Returns a Pandas dataframe of temperature readings in the specified month of the specified year\n    between the minimum and maximum specified latitudes. This data comes from a SQL database.\n    \n    Arguments:\n        db_file (str): a file of a sql database\n        year (int): the year that you want to observe data from\n        month (str): an integer for the month of the year which the data should be returned\n        min_latitude (dbl): the minimum latitude of stations for which should be returned\n        max_latitude (dbl): the maximum latitude of stations for which should be returned\n        \n    Returns: a dataframe corresponding to the above specifications, with columns:\n        NAME (str): the station name\n        LATITUDE (dbl): the latitude of the station\n        Country (str): the name of the country where the station is located\n        Year (int): the year when the temperature reading was taken\n        Month (int): the month when the temperature reading was taken\n        Temp (dbl): the average temperature at the specified station during the specified year and month\n    '''\n    with sqlite3.connect(db_file) as conn:\n        cmd = \\\n        f\"\"\"\n        SELECT \n            stations.NAME, stations.LATITUDE, countries.Name \"Country\", temperatures.Year, temperatures.Month, temperatures.Temp\n        FROM \n            stations\n        INNER JOIN \n            countries ON SUBSTRING(stations.ID, 1, 2) = countries.[FIPS 10-4]\n        JOIN\n            temperatures ON stations.ID = temperatures.ID\n        WHERE\n            temperatures.Year = {year}\n            AND\n            temperatures.Month = {month}\n            AND\n            stations.LATITUDE BETWEEN {min_latitude} AND {max_latitude}\n        \"\"\"\n        df = pd.read_sql_query(cmd, conn)\n    \n    return df"
  },
  {
    "objectID": "posts/Homework1/HW1.html#testing-query_climate_database2-function",
    "href": "posts/Homework1/HW1.html#testing-query_climate_database2-function",
    "title": "Analysis of Historic Temperature Data for Different Countries",
    "section": "Testing query_climate_database2() Function:",
    "text": "Testing query_climate_database2() Function:\n\nWe will now test the function, displaying the dataframe that we get using db_file = “hw1.db” (the database created above, year = 2003, month = 1, min_latitude = 0, max_latitude = 30.\nThis will give us a dataframe of all the database recordings in January of 2003 from stations with latitude between 0 and 30.\n\n\nquery_climate_database2(db_file = \"hw1.db\", \n                        year = 2003, \n                        month = 1, \n                        min_latitude = 0, \n                        max_latitude = 30)\n\n\n\n\n\n\n\n\nNAME\nLATITUDE\nCountry\nYear\nMonth\nTemp\n\n\n\n\n0\nDUBAI_INTL\n25.2550\nUnited Arab Emirates\n2003\n1\n19.39\n\n\n1\nABU_DHABI_INTL\n24.4330\nUnited Arab Emirates\n2003\n1\n19.64\n\n\n2\nAL_AIN_INTL\n24.2620\nUnited Arab Emirates\n2003\n1\n18.45\n\n\n3\nIN_AMENAS\n28.0500\nAlgeria\n2003\n1\n11.95\n\n\n4\nTAMANRASSET\n22.8000\nAlgeria\n2003\n1\n14.20\n\n\n...\n...\n...\n...\n...\n...\n...\n\n\n1115\nCHRISTIANSTED_AP\n17.7028\nVirgin Islands, U.S.\n2003\n1\n26.28\n\n\n1116\nCHARLOTTE_AMALIE_AP\n18.3331\nVirgin Islands, U.S.\n2003\n1\n26.36\n\n\n1117\nVILLA_CISNEROSMIL\n23.7000\nWestern Sahara\n2003\n1\n18.35\n\n\n1118\nDAKHLA\n23.7110\nWestern Sahara\n2003\n1\n17.53\n\n\n1119\nWAKE_ISLAND\n19.2833\nWake Island\n2003\n1\n26.16\n\n\n\n\n1120 rows × 6 columns"
  },
  {
    "objectID": "posts/Homework1/HW1.html#temperature_latitude_plot-function",
    "href": "posts/Homework1/HW1.html#temperature_latitude_plot-function",
    "title": "Analysis of Historic Temperature Data for Different Countries",
    "section": "temperature_latitude_plot() Function:",
    "text": "temperature_latitude_plot() Function:\n\nArguments:\n\n\ndb_file: a file of a sql database\nyear: the year that you want to observe data from\nmonth: an integer for the month of the year which the data should be returned\nmin_latitude: the minimum latitude of stations for which should be returned\nmax_latitude: the maximum latitude of stations for which should be returned\n**kwargs: addition arguments to be used in plt.plot function\n\n\nReturns:\n\n\nAn interactive scatterplot with station latitude on the x-axis and station average temperature for the specified month and year on the y-axis. The points are colored by country.\n\n\nfrom climate_database import temperature_latitude_plot\nprint(inspect.getsource(temperature_latitude_plot))\n\ndef temperature_latitude_plot(db_file, year, month, min_latitude, max_latitude, **kwargs):\n    '''\n    Returns an interactive scatterplot of average temperature vs. station latitude for stations in a \n    specified latitude range and a specified month and year.\n    \n    Arguments:\n        db_file: a file of a sql database\n        year: the year that you want to observe data from\n        month: an integer for the month of the year which the data should be returned\n        min_latitude: the minimum latitude of stations for which should be returned\n        max_latitude: the maximum latitude of stations for which should be returned\n        **kwargs: addition arguments to be used in plt.plot function\n        \n    Returns: \n        An interactive scatterplot with station latitude on the x-axis and station \n        average temperature for the specified month and year on the y-axis. The points are \n        colored by country.\n    '''\n    df = query_climate_database2(db_file, year, month, min_latitude, max_latitude)\n    \n    return px.scatter(data_frame = df, x = \"LATITUDE\", y = \"Temp\", \n                      color = \"Country\",\n                      hover_name = \"NAME\", \n                      title = f\"Station Average Temperature by Latitude in Month {month} of {year}\",\n                      labels = {\"LATITUDE\":\"Latitude\", \"Temp\":\"Average Temperature\"},\n                      **kwargs)"
  },
  {
    "objectID": "posts/Homework1/HW1.html#testing-temperature_latitude_plot-function",
    "href": "posts/Homework1/HW1.html#testing-temperature_latitude_plot-function",
    "title": "Analysis of Historic Temperature Data for Different Countries",
    "section": "Testing temperature_latitude_plot() Function:",
    "text": "Testing temperature_latitude_plot() Function:\n\nWe will now test the function, displaying the visualization that the function gives using db_file = “hw1.db” (the database created above), year = 2003, month = 1, min_latitude = 0, max_latitude = 30, size = “Year”, size_max = 7.\nThis will give us a scatterplot of the station temperature recordings in stations with latitudes between 0 and 30 vs the latitude of the station. The points will be colored by country. The specifications of the scatterplot plot are marker size (I made the marker size year so they would all be the same size) and max marker size (7).\n\n\ntemperature_latitude_plot(db_file = \"hw1.db\", \n                          year = 2003, \n                          month = 1, \n                          min_latitude = 0, \n                          max_latitude = 30, \n                          size = \"Year\", \n                          size_max = 7)\n\n\n\n\n\nThis visualization makes it apparent that the average temperature in January of 2003 decreases as we move up in latitude. This makes sense intuitively because a greater latitude means a further distance from the equator, so we would expect temperatures to decrease as we move away from the equator.\nHowever, this relationship shows a lot of variation, which indicates that distance from the equator is not the only factor in the increasing temperatures."
  },
  {
    "objectID": "posts/Homework1/HW1.html#question-2-can-we-compare-the-average-temperature-recorded-at-stations-in-different-selected-countries-in-a-given-year",
    "href": "posts/Homework1/HW1.html#question-2-can-we-compare-the-average-temperature-recorded-at-stations-in-different-selected-countries-in-a-given-year",
    "title": "Analysis of Historic Temperature Data for Different Countries",
    "section": "Question 2: Can we compare the average temperature recorded at stations in different selected countries in a given year?",
    "text": "Question 2: Can we compare the average temperature recorded at stations in different selected countries in a given year?"
  },
  {
    "objectID": "posts/Homework1/HW1.html#query_climate_database3-function",
    "href": "posts/Homework1/HW1.html#query_climate_database3-function",
    "title": "Analysis of Historic Temperature Data for Different Countries",
    "section": "query_climate_database3() Function:",
    "text": "query_climate_database3() Function:\n\nWe create a function called query_climate_database3() with the following specifications:\nArguments:\n\n\ndb_file: a file of a sql database\ncountries: a list of countries that will be compared\nyear: the year that you want to observe data from\nmonth: an integer for the month of the year which the data should be returned\n\n\nReturns: a dataframe corresponding to the above specifications, with columns:\n\n\nNAME: the station name\nCountry: the name of the country where the station is located\nYear: the year when the temperature reading was taken\nMonth: the month when the temperature reading was taken\nTemp: the average temperature at the specified station during the specified year and month\n\n\nThe code for the query_climate_database3() function is contained in a separate file called “climate_database.py”.\nWe load in the function and display the code below.\n\n\nfrom climate_database import query_climate_database3\nprint(inspect.getsource(query_climate_database3))\n\ndef query_climate_database3(db_file, countries, year):\n    '''\n    Returns a Pandas dataframe of temperature readings in the specified year\n    in specified countries. This data comes from a SQL database.\n    \n    Arguments:\n        db_file (str): a file of a sql database\n        countries (list): a list of strings representing country names\n        year (int): the year that you want to observe data from\n        \n    Returns: a dataframe corresponding to the above specifications, with columns:\n        NAME (str): the station name\n        Country (str): the name of the country where the station is located\n        Year (int): the year when the temperature reading was taken\n        Month (int): the month when the temperature reading was taken\n        Temp (dbl): the average temperature at the specified station during the specified year and month\n    '''\n    with sqlite3.connect(db_file) as conn:\n        cmd = \\\n        f\"\"\"\n        SELECT \n            stations.NAME, countries.Name \"Country\", temperatures.Year, temperatures.Month, temperatures.Temp\n        FROM \n            stations\n        INNER JOIN \n            countries ON SUBSTRING(stations.ID, 1, 2) = countries.[FIPS 10-4]\n        JOIN\n            temperatures ON stations.ID = temperatures.ID\n        WHERE \n            countries.Name IN {prepare_list_for_sql(countries)}\n            AND \n            temperatures.Year = {year}\n        \"\"\"\n        df = pd.read_sql_query(cmd, conn)\n    \n    return(df)"
  },
  {
    "objectID": "posts/Homework1/HW1.html#prepare_list_for_sql-helper-function",
    "href": "posts/Homework1/HW1.html#prepare_list_for_sql-helper-function",
    "title": "Analysis of Historic Temperature Data for Different Countries",
    "section": "prepare_list_for_sql() Helper Function:",
    "text": "prepare_list_for_sql() Helper Function:\n\nLooking at the code for the query_climate_database3() function above, we had to apply a function to the countries list that is inputted to allow it to be used the the query. The specifics of that function are outlined here.\nArgument:\n\n\ncharacter_list: a list of country names\n\n\nReturns:\n\n\nA string of the list elements enclosed in parentheses and separated by commas, which is suitable for usage in a sql query.\n\n\nThe code for the prepare_list_for_sql() function is contained in a separate file called “climate_database.py”.\nWe load in the function and display the code below.\n\n\nfrom climate_database import prepare_list_for_sql\nprint(inspect.getsource(prepare_list_for_sql))\n\ndef prepare_list_for_sql(character_list):\n    '''\n    Returns a list that is acceptable for subsetting in a SQL query.\n    \n    Arguments:\n        character_list (list): a list of strings representing country names\n        \n    Returns:\n        A list format that is acceptable for subsetting in a SQL query.\n    '''\n    return f\"\"\"('{\"', '\".join(character_list)}')\"\"\""
  },
  {
    "objectID": "posts/Homework1/HW1.html#testing-prepare_list_for_sql-helper-function",
    "href": "posts/Homework1/HW1.html#testing-prepare_list_for_sql-helper-function",
    "title": "Analysis of Historic Temperature Data for Different Countries",
    "section": "Testing prepare_list_for_sql() Helper Function:",
    "text": "Testing prepare_list_for_sql() Helper Function:\n\nWe will now test the function, displaying the output that the function gives for the list of countries [“Egypt”, “India”, “United States”].\n\n\nprepare_list_for_sql([\"Egypt\", \"India\", \"United States\"])\n\n\"('Egypt', 'India', 'United States')\"\n\n\n\nThis form is suitable for the IN function in a sql query."
  },
  {
    "objectID": "posts/Homework1/HW1.html#testing-query_climate_database3-function",
    "href": "posts/Homework1/HW1.html#testing-query_climate_database3-function",
    "title": "Analysis of Historic Temperature Data for Different Countries",
    "section": "Testing query_climate_database3() Function:",
    "text": "Testing query_climate_database3() Function:\n\nWe will now test the function, displaying the dataframe that we get using db_file = “hw1.db” (the database created above, year = 2003, and countries = [“Egypt”, “India”, “United States”].\nThis will give us a dataframe of all the database temeperature recordings in 2003 from Egypt, India, and the United States.\n\n\nquery_climate_database3(db_file = \"hw1.db\", \n                        year = 2003, \n                        countries = [\"Egypt\", \"India\", \"United States\"])\n\n\n\n\n\n\n\n\nNAME\nCountry\nYear\nMonth\nTemp\n\n\n\n\n0\nMERSA_MATRUH\nEgypt\n2003\n1\n15.50\n\n\n1\nMERSA_MATRUH\nEgypt\n2003\n2\n12.53\n\n\n2\nMERSA_MATRUH\nEgypt\n2003\n3\n13.50\n\n\n3\nMERSA_MATRUH\nEgypt\n2003\n4\n17.30\n\n\n4\nMERSA_MATRUH\nEgypt\n2003\n5\n21.30\n\n\n...\n...\n...\n...\n...\n...\n\n\n83128\nLINCOLN_11_SW\nUnited States\n2003\n8\n25.01\n\n\n83129\nLINCOLN_11_SW\nUnited States\n2003\n9\n17.08\n\n\n83130\nLINCOLN_11_SW\nUnited States\n2003\n10\n13.31\n\n\n83131\nLINCOLN_11_SW\nUnited States\n2003\n11\n2.76\n\n\n83132\nLINCOLN_11_SW\nUnited States\n2003\n12\n-0.65\n\n\n\n\n83133 rows × 5 columns"
  },
  {
    "objectID": "posts/Homework1/HW1.html#countries_compare_temp_plot-function",
    "href": "posts/Homework1/HW1.html#countries_compare_temp_plot-function",
    "title": "Analysis of Historic Temperature Data for Different Countries",
    "section": "countries_compare_temp_plot() Function:",
    "text": "countries_compare_temp_plot() Function:\n\nThis plot will show multiple facets of the data. There will be a different line plot shown for each selected country.\nArguments:\n\n\ndb_file: a file of a sql database\ncountries: a list of countries that will be compared\nyear: the year that you want to observe data from\nmonth: an integer for the month of the year which the data should be returned\n\n\nReturns:\n\n\nA bar plot with each bar representing a country and the height of the bar representing the median temperature of all stations in that country in the given month and year.\n\n\nThe code for the countries_compare_temp_plot() function is contained in a separate file called “climate_database.py”.\nWe load in the function and display the code below.\n\n\nfrom climate_database import countries_compare_temp_plot\nprint(inspect.getsource(countries_compare_temp_plot))\n\ndef countries_compare_temp_plot(db_file, countries, year, **kwargs):\n    '''\n    Returns multiple line plots, one for each country, that show the temperature in each month.\n    \n    Arguments:\n        db_file: a file of a sql database\n        countries: a list of countries that will be compared\n        year: the year that you want to observe data from\n        \n    Returns: \n        An array of line plots, one for each country. These line plots show the change in average temperature\n        throughout the countries.\n    '''\n    df = query_climate_database3(db_file, countries, year)\n\n    fig = make_subplots(rows = 1, cols = len(countries))\n    \n    for i in range(len(countries)):\n        # get the median temperature for each station in the given country and year\n        df_temp = df[df[\"Country\"] == countries[i]]\n        df_temp = df_temp.groupby(\"Month\")[\"Temp\"].median()\n        df_temp = pd.DataFrame({\"Month\":df_temp.index, \"Temp\":df_temp.values})\n        # create a line plot of the current country and add it to the figure\n        plot_temp = go.Scatter(x = df_temp[\"Month\"], y = df_temp[\"Temp\"], \n                               text = [f\"{countries[i]} Month {j} Avg Temp\" for j in range(1,13)], \n                               name = f\"{countries[i]} Average Monthly Temperature in {year}\")\n        fig.add_trace(plot_temp, row = 1, col = i + 1)\n    \n    return fig"
  },
  {
    "objectID": "posts/Homework1/HW1.html#testing-countries_compare_temp_plot-function",
    "href": "posts/Homework1/HW1.html#testing-countries_compare_temp_plot-function",
    "title": "Analysis of Historic Temperature Data for Different Countries",
    "section": "Testing countries_compare_temp_plot() Function:",
    "text": "Testing countries_compare_temp_plot() Function:\n\nWe will now test the function, displaying the visualization that the function gives using db_file = “hw1.db” (the database created above), year = 2020, month = 1, opacity = 0.8, color = “Country”.\nThis will give us a barplot with each bar representing a country and the heights of the bars representing the average temperature in that country in January of 2020. The specifications of the scatterplot plot are bar opacity (0.8) and bar color (different for each country).\n\n\nfig = countries_compare_temp_plot(db_file = \"hw1.db\", \n                                  countries = [\"India\", \"Egypt\", \"United States\"], \n                                  year = 2020)\nfig.show()\n\n\n\n\n\nThe function works as intended, clearly displaying the difference in average temperatures in 2020 between Egypt, India, and the United States.\nIt is apparent that both India and Egypt were significantly hotter than the United States in every month of 2020.\nIt is also interesting to note that India shows a strange drop in temperature in August and Egypt shows a strange drop in temperature in July, whereas the United States temperatures show a clear bell-shapes pattern throughout the year.\nComparisons such as there can be very useful when considering differences in climate between different countries.\nThis plot shows multiple facets of the data because the year and country are subsetted in the plots.\nAs a sidenote: this functionality that I used to create the subplots in the figure did not allow me to create axis labels or titles for the individual plots. The specifications for each of the data points can be found by hovering over the data point in the interactive plot."
  },
  {
    "objectID": "posts/Homework0/HW0.html",
    "href": "posts/Homework0/HW0.html",
    "title": "Homework 0",
    "section": "",
    "text": "We start by importing the necessary packages for this task. We will use pandas to load in the data into a data frame object, numpy to create an array for the visualization, and matplotlib.pyplot to visualize the data.\n\n\nimport pandas as pd\nimport numpy as np\nimport matplotlib.pyplot as plt\n\n\n\n\nIn order to figure out what type of visualization to make using the penguins dataset, we will first read in the dataset and look at its columns. This will allow us to formulate a question about the data that our visualization will answer.\n\n\nurl = \"https://raw.githubusercontent.com/pic16b-ucla/24W/main/datasets/palmer_penguins.csv\"\npenguins = pd.read_csv(url)\npenguins.head()\n\n\n\n\n\n\n\n\nstudyName\nSample Number\nSpecies\nRegion\nIsland\nStage\nIndividual ID\nClutch Completion\nDate Egg\nCulmen Length (mm)\nCulmen Depth (mm)\nFlipper Length (mm)\nBody Mass (g)\nSex\nDelta 15 N (o/oo)\nDelta 13 C (o/oo)\nComments\n\n\n\n\n0\nPAL0708\n1\nAdelie Penguin (Pygoscelis adeliae)\nAnvers\nTorgersen\nAdult, 1 Egg Stage\nN1A1\nYes\n11/11/07\n39.1\n18.7\n181.0\n3750.0\nMALE\nNaN\nNaN\nNot enough blood for isotopes.\n\n\n1\nPAL0708\n2\nAdelie Penguin (Pygoscelis adeliae)\nAnvers\nTorgersen\nAdult, 1 Egg Stage\nN1A2\nYes\n11/11/07\n39.5\n17.4\n186.0\n3800.0\nFEMALE\n8.94956\n-24.69454\nNaN\n\n\n2\nPAL0708\n3\nAdelie Penguin (Pygoscelis adeliae)\nAnvers\nTorgersen\nAdult, 1 Egg Stage\nN2A1\nYes\n11/16/07\n40.3\n18.0\n195.0\n3250.0\nFEMALE\n8.36821\n-25.33302\nNaN\n\n\n3\nPAL0708\n4\nAdelie Penguin (Pygoscelis adeliae)\nAnvers\nTorgersen\nAdult, 1 Egg Stage\nN2A2\nYes\n11/16/07\nNaN\nNaN\nNaN\nNaN\nNaN\nNaN\nNaN\nAdult not sampled.\n\n\n4\nPAL0708\n5\nAdelie Penguin (Pygoscelis adeliae)\nAnvers\nTorgersen\nAdult, 1 Egg Stage\nN3A1\nYes\n11/16/07\n36.7\n19.3\n193.0\n3450.0\nFEMALE\n8.76651\n-25.32426\nNaN\n\n\n\n\n\n\n\n\nThe dataset has columns studyName, Sample Number, Species, Region, Island, Stage, Individual ID, Clutch Completion, Date Egg, Culmen Length, Culmen Depth, Flipper Length, Body Mass, Sea, Delta 15 N, Delta 13 C, and Comments.\nFor this tutorial, we will specifically be looking at the Body Mass column because this can be indicative of the overall health and strength of the penguins.\nMore specifically, we will attempt to visualize how the body mass of a penguin depends on the sex of the penguin and the island that the penguin lives on.\nNow that we have our area of interest, we can formulate the question that our visualization will attempt to answer.\nThat question will be: How does the body mass of a penguin change based on its sex and the island that it lives on?\n\n\n\n\n\nWe start by grouping the observations in the dataset by island and sex and finding the median body mass of penguins for each category combination. This simple process is outlined below.\n\n\npenguins_by_island = penguins.groupby([\"Island\", \"Sex\"])[\"Body Mass (g)\"].median()\npenguins_by_island\n\nIsland     Sex   \nBiscoe     .         4875.0\n           FEMALE    4587.5\n           MALE      5350.0\nDream      FEMALE    3450.0\n           MALE      3950.0\nTorgersen  FEMALE    3400.0\n           MALE      4000.0\nName: Body Mass (g), dtype: float64\n\n\n\nAt first glance, it appears that male penguins at each island have higher mass that females on each island.\nIt also seems like the penguins on Biscoe Island have much higher mass than the other two islands.\nWe will see if we can visualize these observations.\n\n\n\n\n\nWe now have three variables that we want to visualize: median body mass, island, and sex.\nBody mass is a numeric variable, whereas island and sex are categorical variables.\nWith this specific combination of one numeric and two categorical variables, we can create a double bar graph to display the trends among these three variables.\nThe code for this bar graph is below. In short, this code block goes through this process:\n\n\nCreate a numpy array for the x-axis of the double bar plot.\nCreate the bars for the bar graph. The median body mass is the height of the bars and we have one bar for each sex-island combination.\nAdd labels to the visualization to make it more clear. The x-axis will be the different islands, the y-axis will be the median body mass, and the bars will be colored based on sex.\n\n\nimport numpy as np\nimport matplotlib.pyplot as plt\n\n# We will create a bar plot that groups by Island and Sex and shows the median \n# body mass of the penguins.\n\n# We will have 3 different ticks on the x-axis, each coprresponding to an island.\nX_axis = np.arange(3)\n\n# We plot the bars for the median body mass of female penguins by island, as \n# calculated above.\nplt.bar(X_axis - 0.2, [4587.5, 3450, 3400], 0.4, label = 'Female') \n\n# We plot the bars for the median body mass of male penguins by island, as \n# calculated above.\nplt.bar(X_axis + 0.2, [5350, 3950, 4000], 0.4, label = 'Male') \n  \nplt.xticks([0,1,2], [\"Biscoe\", \"Dream\", \"Torgersen\"]) \nplt.xlabel(\"Island\") \nplt.ylabel(\"Median Body Mass of Penguins\") \nplt.title(\"Body Mass of Penguins by Island and Sex\") \nplt.legend() \nplt.show() \n\n\n\n\n\n\n\n\n\nAs we can see from the visualization, Biscoe island has penguins with higher body mass than Dream island and Torgersen island. Also, male penguins on average have a greater body mass that female penguins on each island.\nThis visualization does not explain exactly why these trends are apparent, but it does allow us to speculate a little bit about the trends. One possible explanation is that there is more food for the penguins on Biscoe island, allowing the penguins to weight more."
  },
  {
    "objectID": "posts/Homework0/HW0.html#loading-in-and-viewing-the-data",
    "href": "posts/Homework0/HW0.html#loading-in-and-viewing-the-data",
    "title": "Homework 0",
    "section": "",
    "text": "In order to figure out what type of visualization to make using the penguins dataset, we will first read in the dataset and look at its columns. This will allow us to formulate a question about the data that our visualization will answer.\n\n\nurl = \"https://raw.githubusercontent.com/pic16b-ucla/24W/main/datasets/palmer_penguins.csv\"\npenguins = pd.read_csv(url)\npenguins.head()\n\n\n\n\n\n\n\n\nstudyName\nSample Number\nSpecies\nRegion\nIsland\nStage\nIndividual ID\nClutch Completion\nDate Egg\nCulmen Length (mm)\nCulmen Depth (mm)\nFlipper Length (mm)\nBody Mass (g)\nSex\nDelta 15 N (o/oo)\nDelta 13 C (o/oo)\nComments\n\n\n\n\n0\nPAL0708\n1\nAdelie Penguin (Pygoscelis adeliae)\nAnvers\nTorgersen\nAdult, 1 Egg Stage\nN1A1\nYes\n11/11/07\n39.1\n18.7\n181.0\n3750.0\nMALE\nNaN\nNaN\nNot enough blood for isotopes.\n\n\n1\nPAL0708\n2\nAdelie Penguin (Pygoscelis adeliae)\nAnvers\nTorgersen\nAdult, 1 Egg Stage\nN1A2\nYes\n11/11/07\n39.5\n17.4\n186.0\n3800.0\nFEMALE\n8.94956\n-24.69454\nNaN\n\n\n2\nPAL0708\n3\nAdelie Penguin (Pygoscelis adeliae)\nAnvers\nTorgersen\nAdult, 1 Egg Stage\nN2A1\nYes\n11/16/07\n40.3\n18.0\n195.0\n3250.0\nFEMALE\n8.36821\n-25.33302\nNaN\n\n\n3\nPAL0708\n4\nAdelie Penguin (Pygoscelis adeliae)\nAnvers\nTorgersen\nAdult, 1 Egg Stage\nN2A2\nYes\n11/16/07\nNaN\nNaN\nNaN\nNaN\nNaN\nNaN\nNaN\nAdult not sampled.\n\n\n4\nPAL0708\n5\nAdelie Penguin (Pygoscelis adeliae)\nAnvers\nTorgersen\nAdult, 1 Egg Stage\nN3A1\nYes\n11/16/07\n36.7\n19.3\n193.0\n3450.0\nFEMALE\n8.76651\n-25.32426\nNaN\n\n\n\n\n\n\n\n\nThe dataset has columns studyName, Sample Number, Species, Region, Island, Stage, Individual ID, Clutch Completion, Date Egg, Culmen Length, Culmen Depth, Flipper Length, Body Mass, Sea, Delta 15 N, Delta 13 C, and Comments.\nFor this tutorial, we will specifically be looking at the Body Mass column because this can be indicative of the overall health and strength of the penguins.\nMore specifically, we will attempt to visualize how the body mass of a penguin depends on the sex of the penguin and the island that the penguin lives on.\nNow that we have our area of interest, we can formulate the question that our visualization will attempt to answer.\nThat question will be: How does the body mass of a penguin change based on its sex and the island that it lives on?"
  },
  {
    "objectID": "posts/Homework0/HW0.html#data-preparation",
    "href": "posts/Homework0/HW0.html#data-preparation",
    "title": "Homework 0",
    "section": "",
    "text": "We start by grouping the observations in the dataset by island and sex and finding the median body mass of penguins for each category combination. This simple process is outlined below.\n\n\npenguins_by_island = penguins.groupby([\"Island\", \"Sex\"])[\"Body Mass (g)\"].median()\npenguins_by_island\n\nIsland     Sex   \nBiscoe     .         4875.0\n           FEMALE    4587.5\n           MALE      5350.0\nDream      FEMALE    3450.0\n           MALE      3950.0\nTorgersen  FEMALE    3400.0\n           MALE      4000.0\nName: Body Mass (g), dtype: float64\n\n\n\nAt first glance, it appears that male penguins at each island have higher mass that females on each island.\nIt also seems like the penguins on Biscoe Island have much higher mass than the other two islands.\nWe will see if we can visualize these observations."
  },
  {
    "objectID": "posts/Homework0/HW0.html#data-visualization",
    "href": "posts/Homework0/HW0.html#data-visualization",
    "title": "Homework 0",
    "section": "",
    "text": "We now have three variables that we want to visualize: median body mass, island, and sex.\nBody mass is a numeric variable, whereas island and sex are categorical variables.\nWith this specific combination of one numeric and two categorical variables, we can create a double bar graph to display the trends among these three variables.\nThe code for this bar graph is below. In short, this code block goes through this process:\n\n\nCreate a numpy array for the x-axis of the double bar plot.\nCreate the bars for the bar graph. The median body mass is the height of the bars and we have one bar for each sex-island combination.\nAdd labels to the visualization to make it more clear. The x-axis will be the different islands, the y-axis will be the median body mass, and the bars will be colored based on sex.\n\n\nimport numpy as np\nimport matplotlib.pyplot as plt\n\n# We will create a bar plot that groups by Island and Sex and shows the median \n# body mass of the penguins.\n\n# We will have 3 different ticks on the x-axis, each coprresponding to an island.\nX_axis = np.arange(3)\n\n# We plot the bars for the median body mass of female penguins by island, as \n# calculated above.\nplt.bar(X_axis - 0.2, [4587.5, 3450, 3400], 0.4, label = 'Female') \n\n# We plot the bars for the median body mass of male penguins by island, as \n# calculated above.\nplt.bar(X_axis + 0.2, [5350, 3950, 4000], 0.4, label = 'Male') \n  \nplt.xticks([0,1,2], [\"Biscoe\", \"Dream\", \"Torgersen\"]) \nplt.xlabel(\"Island\") \nplt.ylabel(\"Median Body Mass of Penguins\") \nplt.title(\"Body Mass of Penguins by Island and Sex\") \nplt.legend() \nplt.show() \n\n\n\n\n\n\n\n\n\nAs we can see from the visualization, Biscoe island has penguins with higher body mass than Dream island and Torgersen island. Also, male penguins on average have a greater body mass that female penguins on each island.\nThis visualization does not explain exactly why these trends are apparent, but it does allow us to speculate a little bit about the trends. One possible explanation is that there is more food for the penguins on Biscoe island, allowing the penguins to weight more."
  },
  {
    "objectID": "index.html",
    "href": "index.html",
    "title": "PIC 16B Website - Trent Bellinger",
    "section": "",
    "text": "Analysis of Historic Temperature Data for Different Countries\n\n\n\n\n\n\nweek 0\n\n\nexample\n\n\n\n\n\n\n\n\n\nJan 29, 2024\n\n\nTrent Bellinger\n\n\n\n\n\n\n\n\n\n\n\n\nHomework 0\n\n\n\n\n\n\nweek 0\n\n\nexample\n\n\n\n\n\n\n\n\n\nJan 13, 2024\n\n\nTrent Bellinger\n\n\n\n\n\n\nNo matching items"
  }
]